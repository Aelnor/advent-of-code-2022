use std::collections::HashMap;
use std::collections::HashSet;

const WIDTH: i128 = 7;

#[derive(PartialEq, Eq, Hash, Debug)]
struct Point {
    x: i128,
    y: i128,
}

struct Shape {
    position: Point,
    data: Vec<Vec<bool>>,
}

impl Shape {
    fn move_right(&mut self, map: &HashSet<Point>) -> bool {
        if self.position.x == WIDTH - 1 {
            return false;
        }

        for i in 0..self.data.len() {
            for j in 0..self.data[0].len() {
                if !self.data[i][j] {
                    continue;
                }

                if self.position.x + j as i128 + 1 as i128 == WIDTH {
                    return false;
                }

                if map.contains(&Point {
                    x: self.position.x + j as i128 + 1,
                    y: self.position.y - i as i128,
                }) {
                    return false;
                }
            }
        }

        self.position = Point {
            x: self.position.x + 1,
            y: self.position.y,
        };
        true
    }

    fn move_left(&mut self, map: &HashSet<Point>) -> bool {
        if self.position.x == 0 {
            return false;
        }
        for i in 0..self.data.len() {
            for j in 0..self.data[0].len() {
                if !self.data[i][j] {
                    continue;
                }

                if map.contains(&Point {
                    x: self.position.x + j as i128 - 1,
                    y: self.position.y - i as i128,
                }) {
                    return false;
                }
            }
        }

        self.position = Point {
            x: self.position.x - 1,
            y: self.position.y,
        };
        true
    }

    fn move_down(&mut self, map: &mut HashSet<Point>) -> bool {
        for i in 0..self.data.len() {
            for j in 0..self.data[0].len() {
                if !self.data[i][j] {
                    continue;
                }

                if self.position.y - i as i128 == 0
                    || map.contains(&Point {
                        x: self.position.x + j as i128,
                        y: self.position.y - i as i128 - 1,
                    })
                {
                    // TO REST!
                    for i2 in 0..self.data.len() {
                        for j2 in 0..self.data[0].len() {
                            if !self.data[i2][j2] {
                                continue;
                            }
                            map.insert(Point {
                                x: self.position.x + j2 as i128,
                                y: self.position.y - i2 as i128,
                            });
                        }
                    }
                    return false;
                }
            }
        }
        self.position = Point {
            x: self.position.x,
            y: self.position.y - 1,
        };

        true
    }

    fn new_minus(map: &HashSet<Point>) -> Self {
        let highest = map
            .into_iter()
            .max_by(|a, b| a.y.cmp(&b.y))
            .unwrap_or(&Point { x: 0, y: 0 });

        let mut addition = 0;
        if highest.y != 0 {
            addition = 1;
        }

        Shape {
            position: Point {
                x: 2,
                y: highest.y + 3 + addition,
            },
            data: Vec::from(vec![vec![true, true, true, true]]),
        }
    }

    fn new_plus(map: &HashSet<Point>) -> Self {
        let highest = map
            .into_iter()
            .max_by(|a, b| a.y.cmp(&b.y))
            .unwrap_or(&Point { x: 0, y: 0 });

        Shape {
            position: Point {
                x: 2,
                y: highest.y + 3 + 3,
            },
            data: Vec::from(vec![
                vec![false, true, false],
                vec![true, true, true],
                vec![false, true, false],
            ]),
        }
    }

    fn new_angle(map: &HashSet<Point>) -> Self {
        let highest = map
            .into_iter()
            .max_by(|a, b| a.y.cmp(&b.y))
            .unwrap_or(&Point { x: 0, y: 0 });

        Shape {
            position: Point {
                x: 2,
                y: highest.y + 3 + 3,
            },
            data: Vec::from(vec![
                vec![false, false, true],
                vec![false, false, true],
                vec![true, true, true],
            ]),
        }
    }

    fn new_stick(map: &HashSet<Point>) -> Self {
        let highest = map
            .into_iter()
            .max_by(|a, b| a.y.cmp(&b.y))
            .unwrap_or(&Point { x: 0, y: 0 });

        Shape {
            position: Point {
                x: 2,
                y: highest.y + 3 + 4,
            },
            data: Vec::from(vec![vec![true], vec![true], vec![true], vec![true]]),
        }
    }

    fn new_square(map: &HashSet<Point>) -> Self {
        let highest = map
            .into_iter()
            .max_by(|a, b| a.y.cmp(&b.y))
            .unwrap_or(&Point { x: 0, y: 0 });

        Shape {
            position: Point {
                x: 2,
                y: highest.y + 3 + 2,
            },
            data: Vec::from(vec![vec![true, true], vec![true, true]]),
        }
    }
}

fn create_shape(index: i128, map: &HashSet<Point>) -> Shape {
    match index {
        0 => Shape::new_minus(map),
        1 => Shape::new_plus(map),
        2 => Shape::new_angle(map),
        3 => Shape::new_stick(map),
        4 => Shape::new_square(map),
        _ => unreachable!(),
    }
}

const TEST_INPUT: &str = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
const INPUT:&str = ">>>><<<<>>><<>>><<<<>><<>>>><><><><<<<><<>>>><<<<>>><><<><<>>>><<>>>><><<>>><>>><<<<>>><<<><<<<>>><<<<>>>><<<<>><<<<><<<<>><<>>><>>>><>>><<>>><<<<>>><>><<<><>>><>>>><><<<<>>><<>>><<><<<<>>><<<<>><>><<>>>><<><>>>><<>><<><>>><>>><<<<><<>><<<>><<>>><<<<>>>><>>>><<<>><<<><<<<>>><>><<<>>>><><<<<>><<><<>>>><<>><<><<>>><><<<><<>><><>>><<<<>><<<<>>>><<<<>>>><<<<>>>><<<<>>><>><<>>>><>>><<>>><<>>><<<>>>><<<<>><<<><>><<<><<<<><><<<>><<><>>>><<>>>><<<>>><<<>>>><>>><<><<<><<<<><<<>>><<<<>><<>>><<><>><>>><>>>><<>>><<<>>>><<<<>>>><>><<<<><>><<>>>><<<<>>><<<><<><<>>><<><>>><>>>><>>><<<>>>><<<<>>>><>>><<<>>>><<<<>>>><<<<><>>><>><<<<>>>><<<>>><<<<>><>>>><<<<><<<<>><<<><<<<>><>><<><<<<>>><>>>><<<<>>><>>><<<><<><<>><<<<>><<>><<><<<><<<<>><<<<>><<<>>><<<<>>>><<<<>>>><>><<<>>><<<>><<<<>>>><<>>><>>>><<<>>>><>><<<<>><>>><<<>><<<<>>>><>>><<><<>><<<>><<<<>>>><><<<<>>><>><>>><<<<>>><>><<<<>>>><>><<>><<<>>>><<>>><<<>>>><><>><<>><<<>>>><<<>><>><>>><<<<>>><<<<>>><><<>><<>>>><<<><<>>><>><>><<<>><<<<>><<<<>>>><<>><><<<>>>><<><><>>>><>><<>><<>><<>><<>><>>>><<>>><<<<><><<><<>><<><<>>><<<<>><<>>><<<<>>><<<<>>><>>><>>><><<<<><><>>>><>>>><<<>>><<<<>><<<<>><<<>>>><>>><<<<>><>>>><<>>>><<>>>><>>><<<<><>><<<<>><<<<>>>><>><><<<<>>><>>>><<>>><<>>><<>><<<>><<<<>>>><<<>><<><<>>><<<><<<<>>><<<<><>>>><>><>>>><<<<>>>><<>><<<<>>><<>><<<>><<><>><<>><><<<<>>><<<<>><>><<>><<>><<>><>><<><<>>>><<>>><>>><>>>><<<>><<><<<><>>><<<><><>>><<<<>>>><<<<>>>><<><<<<>><<<<><<><<<>>><<<<>>>><<>>>><<><<>>><<<<>>><<<<><<<><>>><<>><<<<>>><<<><<<<>>>><<>>><<<><<<<>>>><>>>><<<<><<>><<>>><<>>>><<>><<><<<<>>><<>>><<<>>><<<>><<<<>>>><<>>>><<>>>><>>><<<>>><<>><><<<>>>><<<<><<<>>>><><<>>><>><<>><>><>>>><><<<><><<>><>>>><<<<>><<<<>>><<<><<<<>>><><<<<>>>><<><<<<><<<<>>><<<<><<<>><<<>><>>><<>>>><<<>>><>>>><<><>>>><<<>>><>>>><<<>><<>>>><<<<>>><<<<>>>><<<><<<<>>><<<<>>>><>>>><<<<>><<<>>><<>><<<><<<>>>><<>><<<<>>><<<>>><<<<>>>><><<>><>><<<>><>>><<>><<<<>>>><<<<>><<>>>><<<><>><>><>>><<<>>>><<>>>><<>>><>>><<<<>>><>>><<>>><<<>>>><<>>>><>>><<>>><<<>>><<<><<<><<<<>>><>>>><<<>>><<<<><<<<>>><<<>>>><><<<<>><<>>>><<<><<<<>>><>>>><<<<><<<<><<<<><><<<<>>><<<>>><<<<>><>><>><<>>><<>><<<<>>>><<<<>>><<<><<>>><<<<>>>><><<<><<><<>><<<<><<>>><<>>><<><<<<>>><<<<>><>>>><<<>><<>>><>><<>>>><<><<<>>>><<>>>><>>><<>>>><<<<>>><<<<>>><<<>><<<><<<><<<>>>><<>><<<<>>>><>><><>>>><<<<>><<<><<<>><<>>>><<<<>>>><>>><<<>><<<>><<>><<<<>>>><>><<<<>>><><<>>>><<<>>><<>>>><<<><<>><>>>><<<>><<<<><<<<>>><<<>>><><><<<><>>><<<>>><<>>><<><<><>>><<<>><<>>><<<<>>>><<<<>><>>><>><>>><>>><>><<>>><<><<<>>><>>><<>><<<<>><>>>><<<><><<<<>>>><<<><<<>>><<<<>><<<>><>><<>><<<>>><<<<><<<<>><<<>><>>>><<<<>>><<><<<>>><<>><<><><<<<>>><<<<>>><<<>>><<<<>><<>><<>>>><<<<>>>><><<<<><<<<>>><<>>><<<<><<<>><<<>>><<>>><<<<>>><><<>>><<<<><<><<<<>>><<>>>><<<><<>>><><<>>>><<<<>>>><<<>>>><<<<>>><<<>>>><<<>>><<<><<<<>>><<>><<>>>><<<><<>>><<><<<>>>><>><<<>><<<<>>>><<>>><<<<><<<<>><<><>><<<<>>><<<>><>>>><<<<>><<>><<>>>><<<><>>>><<<><<<<><>>>><<>>><<>><<<>>>><<>>><<<>><<>>><>><<>><>>><<<<>>>><<<>>><>>><<>>><>>><<<><><<<>>><<>><<><>>>><<<>>><<<<><<>>><<<<>>><<<>>>><<><>>>><<>><>>><<>><>><<<>>>><>>><<<<>>><>>><<<>><<<>>>><<<>>><<<><<<><<<<><<<<>>><<<<>><<<<>><<<<>>>><<<<>>><><><<><<<<><>>>><<<<>>><<<><<<>><>>><><<>><>>>><<<<>><<<>>><<<<>>><<<>>><>>>><><<<<>>><<<>>>><<<>><<<<>>>><<<>><<<>><<<>>><<>>>><<>><>>>><<<<>>><<<<>><>>><<<>><><<<>><<<<>>>><>>>><<<><<><><<>><<><>><<<>>>><<><<<>><<>>><<><<>><<<>>><<><<<><<<>><<><>>>><><<<<><<<<>><<<>>><<<<>>><<<<>><<<><<<>><><<<>>><<<<>>><>>><<<<>>><<>>>><<<<>><<>>><<>><>>>><<<<>><<<<>><<<>>>><<<>>>><<><<<><<>>><<>><<<<>>>><<><>><>>><><<><<><>>>><<<<><<<>>>><<>>><<<>>>><<<><<>><<<<>>>><<<<>><<<<>>><<><<><<<<>>><<<<>>><<<>><<>>><<<<><><<<<><<><<<<>>><<>>><<<>>>><<><<<>>>><<<<>>>><<<<>><<<<>>>><<>>>><>>>><>><<<<>><>>>><>>>><>>>><<<>>><<<<>>><>><>>><<>>>><<<>>>><<<<><<<<><<<><<><<>>>><<><>>>><<<>>><<<<>>>><<>>>><<>>><>>>><<<>><<<>>>><<><<><<<>><>><<>>><<>><<>><>>><<<><><<<<>><>><>><>>><<<>>><<<><<<>><<>>>><><<>>>><<>>>><><<<><<>><<<><>>><>>><><<>><>>><><<>><<<<>><<>>>><>>><<<><>>>><>>>><>><>>>><<<<>>><<<>>><<><<>>>><<<<><<>>><<<>>><<<<>>>><>>><<<>>>><<<<><>>><<>><<<>>><<<<><>><<<><<>>>><<<>><><<<<>><><<>>><>>>><<>>><<<><<<<>>>><<<>>><<<<><<<<>>><>>>><<<<>><<>>><>><<>><<>>>><<<<>>><<><<>>>><<<>><<<<>><<<>><>>><<<>>><<><<<<><<>>><>><<<>><<<>>>><<<>><><<>>><<>>><<<<><<>>><<<>><<><<<>>><<<>>><><<<<>><<>>>><>>><<><<<>>>><<><<>>>><<<<>><><<<>>>><<>><>>><<<<><>><<<><<>>><<<><<<>>><>>>><<<>><>>>><<<>>><<>>>><<<<>><>>><<<<><<<<>>>><<<>>>><><<<<>>>><<<>>><<><<<<>><><<>>><<<>>>><<><<<>><<>>><<<>>>><<<><<<>>><<<><>>><<><><<<>>><<<<>><<>>><<<><<<><<><<<<><<<><<>>>><>><<<><<<<>><>><>><>>>><<<<>><<<<>>><>>><>><><>><<<<>><><<<><<><>>>><<>>><<<<>>><<>><<<>>><<<<><<<>>>><<<<>>>><>>>><<><<<<><<<>>>><<<><<<><<<<>>>><<<<>>><<<>><><>>><><<<<>>>><<<>>>><>><>><>>><<<<>>><<<>>><><<<>>>><<>>><>><<<>>><<<<>><<<<>>>><<<>>><<<>>>><<><<>><>>>><<<<>>><>><<<<>><<<>>><<<><>><<><<<>><<<>>>><<<<>>><<>>>><<<<><>>><>>>><<<<>>><<<>>><>>>><<<<>><<<>>>><<><>><<<<>>><<<><<><<>><<><><<<<>>><<><<<>><>>><<>>><<><<<>>><<<<>>><<<<>><<>><<<<>>><<<<>><<<>><<<><<<><<<<>><>><<<<>>>><>>><<<>>><<<<>><<<>>>><<>>>><<<<>>>><<<>>><<><<<><>>>><<><<<>>><<><>><<><><<<<>>>><<<<>><<<>>><<<<><>>>><<<<>><<<<>><<>><<<>><<>>>><<<<>>>><>>><<>>>><<<>>>><<>>>><<><<>>>><<>><<<<>><>>>><><<>>><>><<<>>>><<<<>>><<<<>>>><<<><<<>>>><<<<>>><<<<>><<<<>>><<<><<<<>><<<<><>>>><<<>>>><<>>>><<<<>>><<><<<<><<<><<<<>>>><>>><>>><<<<>>>><<><<<<>>><>>><<<>>>><>>>><>><<>>>><><<<>>><<<<>><<>>><<>>><<<<>>><>>><<<<><<>>><>>><>><<><<<>>>><<<>>>><<<>><>><<<><<<>>><<<<>>><<<>>><>>><<<><<<<>>>><<<<><<>>>><<<>><<<<>><<<>>>><<>>><<>>>><<>>><<<><<>>><><><><>>>><>>>><<><><<>><<>>><<<<>>>><<<<><>><<<<><<<>>><<>>>><<><<<<>>><>><<><>><>>>><>><<<<>>>><<<<>>><>>>><<<<>><<<<>><><>><<><>>><<<>>>><><>>>><><<<>><<<<>>><<<<>><<<>>>><<<>>><<<><<>><<<>><<<<>>><<>>><<>><>>><>><<<>>>><<<><<<<>><><<<<>>>><<<<>>><<<<>><>><<<>>><<<>><<<>>><<<<>>><<>><<<><<<<>>>><<<>>>><<><<<<>><<<><<<<>>><<<<><<>>>><<<><<<<>><<<>>><>>><><<<>>><<>>><<>><<<<>>><>><<<<>>><<<>>><><<<<>>>><<<>>><<>>><<>>><>><>>><<<><>>><<<<>>><<<>>><>>><<<>><<<>><><<<<>>><>>><<>><<>><>>><<>>>><>><>>>><<<>><<>>>><<<<>><<<>><<>><<>>>><<<>><<>><<<><<<>>><>><<<>>>><<>><>>>><<><<<>>>><<>>>><<>><<>>><<<>>><>>>><<<><>>>><<<>><<<<>>>><<<<><<>><<<>><<<>>>><<>>>><<<<><<<<>>><<<>>><>><<<>>><<<><>>>><<<<>><<<>><>>><<>>>><<<>>><<<<>>>><<><<>>><<>>><>><><<<><>>><<<<>>>><<<<>><<<>>>><<<>><<>>><<<>><<>><<<<>><<<>><<<<>><<>>>><>>><<<<>>><<<<>>><><><<<<><<<>>><<<<><<<>>>><<<<>>>><>>><>>><>>><<>>>><<<<>>><<<<>>><<<>>>><<<<>>>><<<<><><<<<>>>><<<>>>><><<>>><<<>>>><<>><<<<>>>><<<><<<<>>><<<>><<>>><<<>>><<>>>><<>><>><<><<<>>>><<>>>><<>><><<>><<<<>><>>><<<>>>><<<<><><<>>>><<>>>><<<><><<<<>><<<<>>>><<>>>><<>>>><>>><<<><<<<>>><<<>>><<<>><<<<>><<<<>><<<<>><<<>>><><<<>>><<>>>><<<>>>><<<>>>><><<<<>>>><<<<>>>><>><<<><<<<>>>><<<<><>>><>>>><><>>><><<<<>>><<<<>>>><<><<<<>>>><>>><>>>><>><<><<<<><<>>>><>><<<<><>>><<<>><<>>>><<>>>><<>>>><<<<>>>><>>>><<<>>>><><>><<<>>>><<<>><<<<>>>><<>>><<<>>><<<>><<<<>><<<<>>>><<<<>><><<<<>><<<<><<<>>>><<<<>><<>>>><>><<<>>><<<><>>><<<><>><>>>><<<<>>>><<<>><<>><>>>><<>>>><<<<>>>><<<<>><>><<<<>><>><<<<>>>><<>>><<>>>><<<<>>><<><<<>>>><<<>>>><<>>>><<>><>>><<<<><<<>>>><<<<>><<<<>>><<>>>><<<><<<<><<>><<<<>><<<<><<>><>>>><<<>><>>>><<<>>>><<>><<>>>><<<<><><<><<><<>><<<<>>>><>>><<<><<><>><<<>>><<<><>><<>>><<<>>><<>>><<>>><<<>>><<<<><>><<<>><<><>>><<<>>><<<<>>><<><>>>><<<<>><<>><<<>><<<><<>>><<>><>><>><<<>>><>><<>>>><<<<>>>><<<<>><<<>>><<>>>><<<<>>>><<>><><<<<>><<>><<>>><>><>>>><<>>><<>>>><<<>>><<<<>>><<>>>><<<<>>>><<>>><<<>><<<>><<>>><<>>><<<>>>><<<<><<>><<><<<><>>>><<<><<<<>>>><<<<><>>>><><<><<>>><<<><>>>><<<>><<<<>><<<>>><<><<>>><<<<>><<>>><<>><<<><<<>><>>><<>><<<<><><<<<>>><<<>>>><<<><<>>>><>><<<<>>>><<<<><<>>>><<<>><<<<>>><<><>>>><><<><>>><>>>><><<><<>><<<<>><<<<>><>><<<>><<><<>><<<>><>><<<>>>><<<>><<<<>><>>>><<<><>>><>>><<<<><<>>><><<<<>>>><<<>><>>>><<>><<<<><<<<>>><><<>><<<><>>>><<>>>><<>><<<<><>><<<<><<<<>>><<>>><<>><<<>>><<<<>>>><<<<><<><>><<<<>>><<><>>><><<<><<>>>><<<><<<><<<<><<<>>>><<<><>>>><>>><>>>><<>><<>>>><<<<>><<<>>><<<<>>>><<<>><><<<>>>><><<>>>><<<><>>>><>>>><<<<>>>><>>>><<><>><<<>>><<<<><>>><>>>><<><<<<><>>><<>>><<>>><<><<<<>>><<<>><<<<>><>>><<<>>>><>><<>>><<<<><<<>>><>><<<><>><<<<>><><>>><<<>>><<>><<<<>><<>>>><<<<><<<>><<><<<<>>>><<>>>><>>>><>><<<<>><<<><>>><<<><<<<><<>><><<<<>><<<><<>>><<><<<><<<><<<>><<<>>><>>><<<<>><<>>><<<>><>>>><<<>><>>>><<<>>><>>><<<>>>><<<<><<<<>>>><<>><<<<>>><<<<>>>><>>><>>><<<>>><<<><<>>><><<<>><<><><>><>><<><<<<><<<>>>><<<>>>><<>>>><<<<>>>><>>>><<<>>><>>>><<<><<<<>>>><<<<><<<<><>>>><<><>>><><<<<>>>><>><<<>>>><<>>><<<>><>>>><<>>><<>><>><<<>>><<<<><<>>>><<>>>><<<>><>><<>>>><<<<><<<>>>><<><<<<>>>><>><<<<><>>>><<>>><<<>>><><>>>><<>>>><<<>>><<>><<>>><>>><<<><>><>>><<<<><>>>><<<<><<<<>><<>>>><<>>><<<<><<<<>><<<>>>><<>>><<><<<<>>>><<<<>><<<>>>><>><<<><<<><<>><<<<>>><<<>>><<<<>>>><>><<>><><<<>>><<>>><<<><<><<<>>><<<>>><<<>>>><<<>>><<<<>><<>><<<><<<>>>><<>>>><>>>><<<<>>><<>><<<>>><<>>>><<<<>>><<<><<><<<<>><<<>><<<>>>><<>>>><>>>><<>><>>>><<<<><<>><<<<><<<<>><>>><<<>><<<>><<<<><<<<>>><<<>><<<>>>><>>>><<<<>>><><<<<><<><<<>>><<<<>><<>>><<<>>><<<>>><<<<>><<>>><<<<>>>><<>><<<>>><<><>><<<<>>>><<>>><>>><>>>><<<>>><<>><>>>><<<>>><>>><<<>>>><<<>>>><>>>><>>><<<<>>><<<>>><<>><>>><<<>><<<<><<<>>><<>>>><><<<<><>><<>>><<<<>><>>><<>>><><<<<>>><<<<>><><<><>><<<<>>><>><<>><<<<><<>>>><<>><><>><<<<>><<<<>>>><<<>>>><<>><<<><>>>><<><<><>>><><>>>><<<><<>>>><<<<>><<<<><<<<><<<>><<>><<<<>>><<>>>><<<><>>><>>>><>>>><<<>>>><<>>>><>>>><<><<>>>><<<<>>>><<<>><<>>><<<<>>>><<<<>>><>>><>>><<<>>>><<>>>><>><><<<>>><<<>>>><>>>><<<<>>><<<><<<>>><<>>>><><>>><<<<><<>><>>>><<>><>>>><<<<>>>><<<<>>><<>><<<><<<<>>><<>>><>>><<<>><>>><><<<>><<><<<<>>>><<>>><<<>>><<<<>><<<<>>>><<<<><<>><<<><<<>>><<<>><<<<>>><>><<>>>><>><<<><<>><<<<>><<<>><<>>><>>><<<>>>><>>>><<<<>><>>><><>>><<<>><<<<>>><<<<>><<<>>><<>>>><>><<<<>><>>>><<><<<><<>>><<<>>>><<<>><<>>><>><>><<<><<<<>>><<<<>><<<<>>><<>>>><<<<><<<>>><<<<>><<<>>>><<<>>>><>>><<><<<><>>><>>><<<>>><<<>>><<<<><<<<>><<<>>>><<<>><<<>>>><><>>>><<<>>>><<<>>>><>><<";

fn play(input: &str, rock_count: i128) -> i128 {
    let mut map = HashSet::new();
    let mut wind_index = 0;

    let mut cycle_map = HashMap::new();
    for i in 0..rock_count {
        let mut shape = create_shape(i % 5, &map);
        loop {
            match input.chars().nth(wind_index).unwrap() {
                '>' => shape.move_right(&map),
                '<' => shape.move_left(&map),
                _ => unreachable!(),
            };
            wind_index = (wind_index + 1) % input.len();

            if !shape.move_down(&mut map) {
                break;
            }
        }
        let highest = map.iter().max_by(|a, b| a.y.cmp(&b.y)).unwrap().y;
        let mut found = true;
        for x in 0..WIDTH {
            if !map.contains(&Point { x, y: highest }) {
                found = false;
                break;
            }
        }
        if !found {
            continue;
        }
        map.retain(|elem| elem.y == highest);
        if let Some((round, prev_height)) = cycle_map.get(&(i % 5, wind_index)) {
            let cycle_rounds = i - round;
            let cycle_height = highest - prev_height;
            let cycles_left = (rock_count - round) / cycle_rounds;
            let additional_rounds = (rock_count - round) % cycle_rounds;
            return cycle_height * cycles_left + play(input, *round + additional_rounds);
        }
        cycle_map.insert((i % 5, wind_index), (i, highest));
    }
    map.into_iter().max_by(|a, b| a.y.cmp(&b.y)).unwrap().y
}

fn main() {
    println!("1: {}", play(INPUT, 2022) + 1);
    println!("2: {}", play(INPUT, 1000000000000) + 1);
}
